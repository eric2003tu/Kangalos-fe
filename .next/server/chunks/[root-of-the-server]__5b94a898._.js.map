{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 140, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Tuyishi/Desktop/Newkanga-fe/kangalos-fe/src/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport type { JWT } from \"next-auth/jwt\";\nimport type { User, Session, NextAuthOptions } from \"next-auth\";\n\nconst authOptions: NextAuthOptions = {\n  session: { strategy: \"jwt\" as const },\n  secret: process.env.NEXTAUTH_SECRET,\n  providers: [\n    CredentialsProvider({\n      name: \"Email & Password\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" }\n      },\n      async authorize(credentials) {\n        if (!credentials) {\n          return null;\n        }\n        const loginUrl = `${process.env.BACKEND_URL}/auth/login`;\n        try {\n          const res = await fetch(loginUrl, {\n            method: \"POST\",\n            headers: { \"Content-Type\": \"application/json\" },\n            body: JSON.stringify({\n              email: credentials.email,\n              password: credentials.password\n            })\n          });\n          const json = await res.json();\n          const { data } = json;\n          if (res.ok && data?.accessToken) {\n            const user = data.user || { id: credentials.email, email: credentials.email };\n            // Store the full user object and accessToken in the session\n            return {\n              ...user,\n              accessToken: data.accessToken\n            };\n          } else {\n          }\n          return null;\n        } catch {\n          return null;\n        }\n      }\n    })\n  ],\n  callbacks: {\n    async jwt({ token, user }: { token: JWT; user?: User; }) {\n      if (user) {\n        // Store all user fields in the JWT\n        Object.assign(token, user);\n      }\n      return token;\n    },\n    async session({ session, token }: { session: Session; token: JWT; }) {\n      // Extend session.user with custom fields\n      session.user = {\n        ...(session.user || {}),\n        id: token.id as string,\n        email: token.email as string,\n        firstName: token.firstName as string,\n        lastName: token.lastName as string,\n        username: token.username as string,\n        userType: token.userType as string,\n        phone: token.phone as string | null,\n        isVerified: token.isVerified as boolean,\n        createdAt: token.createdAt as string,\n        updatedAt: token.updatedAt as string,\n      };\n      // Attach accessToken directly to session for easy access\n      (session as unknown as { accessToken?: string; }).accessToken = token.accessToken as string;\n      return session;\n    }\n  }\n};\n\nconst handler = NextAuth(authOptions);\nexport { handler as GET, handler as POST };\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAIA,MAAM,cAA+B;IACnC,SAAS;QAAE,UAAU;IAAe;IACpC,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,WAAW;QACT,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAQ;gBACvC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YACA,MAAM,WAAU,WAAW;gBACzB,IAAI,CAAC,aAAa;oBAChB,OAAO;gBACT;gBACA,MAAM,WAAW,GAAG,QAAQ,GAAG,CAAC,WAAW,CAAC,WAAW,CAAC;gBACxD,IAAI;oBACF,MAAM,MAAM,MAAM,MAAM,UAAU;wBAChC,QAAQ;wBACR,SAAS;4BAAE,gBAAgB;wBAAmB;wBAC9C,MAAM,KAAK,SAAS,CAAC;4BACnB,OAAO,YAAY,KAAK;4BACxB,UAAU,YAAY,QAAQ;wBAChC;oBACF;oBACA,MAAM,OAAO,MAAM,IAAI,IAAI;oBAC3B,MAAM,EAAE,IAAI,EAAE,GAAG;oBACjB,IAAI,IAAI,EAAE,IAAI,MAAM,aAAa;wBAC/B,MAAM,OAAO,KAAK,IAAI,IAAI;4BAAE,IAAI,YAAY,KAAK;4BAAE,OAAO,YAAY,KAAK;wBAAC;wBAC5E,4DAA4D;wBAC5D,OAAO;4BACL,GAAG,IAAI;4BACP,aAAa,KAAK,WAAW;wBAC/B;oBACF,OAAO,CACP;oBACA,OAAO;gBACT,EAAE,OAAM;oBACN,OAAO;gBACT;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAgC;YACrD,IAAI,MAAM;gBACR,mCAAmC;gBACnC,OAAO,MAAM,CAAC,OAAO;YACvB;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAqC;YACjE,yCAAyC;YACzC,QAAQ,IAAI,GAAG;gBACb,GAAI,QAAQ,IAAI,IAAI,CAAC,CAAC;gBACtB,IAAI,MAAM,EAAE;gBACZ,OAAO,MAAM,KAAK;gBAClB,WAAW,MAAM,SAAS;gBAC1B,UAAU,MAAM,QAAQ;gBACxB,UAAU,MAAM,QAAQ;gBACxB,UAAU,MAAM,QAAQ;gBACxB,OAAO,MAAM,KAAK;gBAClB,YAAY,MAAM,UAAU;gBAC5B,WAAW,MAAM,SAAS;gBAC1B,WAAW,MAAM,SAAS;YAC5B;YACA,yDAAyD;YACxD,QAAiD,WAAW,GAAG,MAAM,WAAW;YACjF,OAAO;QACT;IACF;AACF;AAEA,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE","debugId":null}}]
}